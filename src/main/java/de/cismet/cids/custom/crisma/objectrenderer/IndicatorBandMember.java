/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.crisma.objectrenderer;

import org.openide.util.NbBundle;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import java.text.NumberFormat;

import java.util.Iterator;

import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import de.cismet.tools.gui.jbands.BandModelEvent;
import de.cismet.tools.gui.jbands.interfaces.BandModelListener;
import de.cismet.tools.gui.jbands.interfaces.Section;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public final class IndicatorBandMember extends javax.swing.JPanel implements Section, BandModelListener, MouseListener {

    //~ Instance fields --------------------------------------------------------

    private double min;
    private double max;
    private IndicatorBand band;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel lblLos;
    private JLabel lblValueRange;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form IndicatorBandMember.
     *
     * @param  band  DOCUMENT ME!
     */
    public IndicatorBandMember(final IndicatorBand band) {
        initComponents();

        this.band = band;

        band.getModel().addBandModelListener(this);
        addMouseListener(this);
    }

    /**
     * Creates a new IndicatorBandMember object.
     *
     * @param  min   DOCUMENT ME!
     * @param  max   DOCUMENT ME!
     * @param  band  DOCUMENT ME!
     */
    public IndicatorBandMember(final double min, final double max, final IndicatorBand band) {
        this(band);

        setMin(min);
        setMax(max);
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        lblValueRange = new JLabel();
        lblLos = new JLabel();

        setBackground(new Color(153, 204, 0));
        setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        setCursor(new Cursor(Cursor.HAND_CURSOR));
        setLayout(new GridBagLayout());

        lblValueRange.setFont(new Font("Lucida Grande", 0, 9));                                                          // NOI18N
        lblValueRange.setText(NbBundle.getMessage(IndicatorBandMember.class, "IndicatorBandMember.lblValueRange.text")); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new Insets(1, 5, 2, 5);
        add(lblValueRange, gridBagConstraints);

        lblLos.setFont(new Font("Lucida Grande", 0, 9));                                                   // NOI18N
        lblLos.setText(NbBundle.getMessage(IndicatorBandMember.class, "IndicatorBandMember.lblLos.text")); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new Insets(2, 0, 1, 0);
        add(lblLos, gridBagConstraints);
    }                                                                                                      // </editor-fold>//GEN-END:initComponents

    @Override
    public double getMin() {
        return min;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  min  DOCUMENT ME!
     */
    public void setMin(final double min) {
        this.min = min;
        updateInterval();
    }

    @Override
    public double getMax() {
        return max;
    }

    /**
     * DOCUMENT ME!
     */
    void updateInterval() {
        lblLos.setText((int)getMin() + " % - " + (int)getMax() + " %");
    }

    /**
     * DOCUMENT ME!
     *
     * @param  max  DOCUMENT ME!
     */
    public void setMax(final double max) {
        this.max = max;
        updateInterval();
    }

    @Override
    public JComponent getBandMemberComponent() {
        return this;
    }

    @Override
    public double getFrom() {
        return min;
    }

    @Override
    public double getTo() {
        return max;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  c  DOCUMENT ME!
     */
    public void setColor(final Color c) {
        setBackground(c);
    }

    @Override
    public void bandModelChanged(final BandModelEvent e) {
        final int index = band.indexOf(this);
        setBackground(IndicatorBand.getBandColor(band.getNumberOfMembers() + 2, index + 1));

        final NumberFormat nf = NumberFormat.getNumberInstance();

        String lower = null;
        String upper = null;
        if (band.getGroups().isEmpty()) {
            lower = nf.format(band.getZeroGroup().getValue());
            upper = nf.format(band.getHundredGroup().getValue());
        } else if (index == 0) {
            lower = nf.format(band.getZeroGroup().getValue());
            upper = nf.format(band.getGroups().first().getValue());
        } else if (index == (band.getNumberOfMembers() - 1)) {
            lower = nf.format(band.getGroups().last().getValue());
            upper = nf.format(band.getHundredGroup().getValue());
        } else {
            final Iterator<CriteriaGroup> it = band.getGroups().iterator();
            while (it.hasNext()) {
                final CriteriaGroup g = it.next();
                if (g.getLevelOfSatisfaction() == (int)getMin()) {
                    lower = nf.format(g.getValue());
                    upper = nf.format(it.next().getValue());
                    break;
                }
            }

            assert (lower != null) && (upper != null);
        }

        lblValueRange.setText(lower + " - " + upper);
        final String unit = band.getHundredGroup().getUnit();
        this.setToolTipText("<html>Level of satisfaction range: " + (int)getMin() + " % - " + (int)getMax() + " %"
                    + "<br/>Indicator value range: " + lower + " " + unit + " - " + upper + " " + unit
                    + "</html>");
    }

    @Override
    public void bandModelSelectionChanged(final BandModelEvent e) {
        // noop
    }

    @Override
    public void bandModelValuesChanged(final BandModelEvent e) {
        // noop
    }

    @Override
    public void mouseClicked(final MouseEvent e) {
        if (!e.isPopupTrigger() && WorldstatesAggregationRenderer._critEditing) {
            final CriteriaGroup g = new CriteriaGroup((int)(getMin() + ((getMax() - getMin()) / 2)),
                    0,
                    band.getHundredGroup().getUnit());
            final int answer = JOptionPane.showConfirmDialog(
                    this,
                    new CriteriaBoundaryPopup(g, false),
                    "Criteria Bounds",
                    JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.PLAIN_MESSAGE);

            if (JOptionPane.OK_OPTION == answer) {
                band.addCriteriaGroup(g);
            }
        }
    }

    @Override
    public void mousePressed(final MouseEvent e) {
        // noop
    }

    @Override
    public void mouseReleased(final MouseEvent e) {
        // noop
    }

    @Override
    public void mouseEntered(final MouseEvent e) {
        setCursor(WorldstatesAggregationRenderer._critEditing ? Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)
                                                              : Cursor.getDefaultCursor());
    }

    @Override
    public void mouseExited(final MouseEvent e) {
        // noop
    }
}
