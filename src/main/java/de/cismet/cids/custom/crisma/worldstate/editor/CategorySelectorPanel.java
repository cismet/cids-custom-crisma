/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.crisma.worldstate.editor;

import Sirius.navigator.connection.SessionManager;

import Sirius.server.middleware.types.MetaClass;
import Sirius.server.middleware.types.MetaObject;

import org.openide.util.NbBundle;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.Component;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;

import de.cismet.cids.custom.crisma.WorldstateContainer;

import de.cismet.cids.dynamics.CidsBean;

import de.cismet.cids.navigator.utils.ClassCacheMultiple;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public class CategorySelectorPanel extends javax.swing.JPanel implements WorldstateContainer {

    //~ Static fields/initializers ---------------------------------------------

    /** LOGGER. */
    private static final transient Logger LOG = LoggerFactory.getLogger(CategorySelectorPanel.class);

    //~ Instance fields --------------------------------------------------------

    private transient CidsBean worldstate;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form CategorySelectorPanel.
     */
    public CategorySelectorPanel() {
        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        setBorder(javax.swing.BorderFactory.createTitledBorder(
                NbBundle.getMessage(CategorySelectorPanel.class, "CategorySelectorPanel.border.title"))); // NOI18N
        setLayout(new java.awt.BorderLayout());

        jList1.setModel(new javax.swing.AbstractListModel() {

                String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };

                @Override
                public int getSize() {
                    return strings.length;
                }
                @Override
                public Object getElementAt(final int i) {
                    return strings[i];
                }
            });
        jScrollPane1.setViewportView(jList1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    } // </editor-fold>//GEN-END:initComponents

    @Override
    public CidsBean getWorldstate() {
        return worldstate;
    }

    @Override
    public void setWorldstate(final CidsBean worldstate) {
        this.worldstate = worldstate;
        init();
    }

    /**
     * DOCUMENT ME!
     */
    private void init() {
        try {
            jList1.setCellRenderer(new DefaultListCellRenderer() {

                    @Override
                    public Component getListCellRendererComponent(final JList arg0,
                            final Object arg1,
                            final int arg2,
                            final boolean arg3,
                            final boolean arg4) {
                        final JLabel l = (JLabel)super.getListCellRendererComponent(arg0, arg1, arg2, arg3, arg4);
                        l.setText(((CidsBean)arg1).getProperty("key").toString());

                        return l;
                    }
                });
            jList1.setModel(new DefaultListModel());
            final DefaultListModel model = (DefaultListModel)jList1.getModel();
            final MetaClass mc = ClassCacheMultiple.getMetaClass("CRISMA", "categories");
            final MetaObject[] mos = SessionManager.getProxy()
                        .getMetaObjectByQuery(SessionManager.getSession().getUser(),
                            "select "
                            + mc.getID()
                            + ", "
                            + mc.getPrimaryKey()
                            + " from categories");
            for (final MetaObject mo : mos) {
                model.addElement(mo.getBean());
            }

            final Collection<CidsBean> c = (Collection<CidsBean>)worldstate.getProperty("categories");
            final Iterator<CidsBean> it = c.iterator();
            final int[] index = new int[c.size()];
            for (int i = 0; i < c.size(); ++i) {
                index[i] = model.indexOf(it.next());
            }
            jList1.setSelectedIndices(index);
        } catch (final Exception e) {
            LOG.error("cannot load categories", e);
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public List<CidsBean> getSelectedCategories() {
        final List<CidsBean> l = new ArrayList<CidsBean>();
        for (final Object o : jList1.getSelectedValues()) {
            l.add((CidsBean)o);
        }
        return l;
    }
}
